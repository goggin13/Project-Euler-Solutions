(*
 * The sequence of triangle numbers is generated by adding the natural numbers. 
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first 
 * ten terms would be:
 *
 *   1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *    1: 1
 *    3: 1,3
 *    6: 1,2,3,6
 *   10: 1,2,5,10
 *   15: 1,3,5,15
 *   21: 1,3,7,21
 *   28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors. 
 * What is the value of the first triangle number to have over five hundred divisors?
 *)

#load "unix.cma";;
#load "util.cmo";;
open Util;;

let factored = Hashtbl.create 100 in


let count_factors n : int  =
	let s : int = int_of_float (ceil (sqrt (float_of_int n))) in
	let rec collect acc c =
		if c = 1 then acc
	  else if n mod c = 0 then 
	    (* let () = print_point n c in
			if Hashtbl.mem factored c then
				let () = print_endline (string_of_int ((Hashtbl.find factored c))) in
				acc + (Hashtbl.find factored c)
			else *)
			if c = (n / c) then
				collect (acc + 1) (c - 1)
		  else
			  collect (acc + 2) (c - 1)
	  else collect acc (c - 1)
	in
  let count = collect 2 s in
  (* let () = Hashtbl.add factored n count in *)
  count
in

let rec find i n : int =
	let c = count_factors n in
	(* let s = (string_of_int n) ^ " : " ^ (string_of_int c) in
	let () = print_endline s in *)
	if c >= 500 then n
	else find (i + 1) (n + i + 1)
in


let start = Unix.time() in
let () = print_endline (string_of_int (find 2 3)) in
print_endline ("completed in " ^ (string_of_float (Unix.time() -. start)) ^ " seconds")

(* 76576500 *)



